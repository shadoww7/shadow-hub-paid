let device = {
    mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Mobile|Tablet|Kindle|Silk|PlayBook|BB10/i.test(navigator.userAgent),
    apple: /iPhone|iPad|iPod|Macintosh|Mac OS X/i.test(navigator.userAgent)
};

let loadedPlugins = [];

/* Elements */
const splashScreen = document.createElement('splashScreen');
const popup = document.createElement('div'); // Pop-up element

/* Globals */
window.features = {
    questionSpoof: true,
    videoSpoof: true,
    autoAnswer: true,
};
window.featureConfigs = {
    autoAnswerDelay: 1.1,
};

/* Security */
document.addEventListener('contextmenu', function (e) { e.preventDefault(); });
document.addEventListener('keydown', function (e) { if (e.key === 'F12' || (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'C' || e.key === 'U' || e.key === 'J'))) e.preventDefault(); });

const originalConsoleError = console.error;
console.error = function(message, ...args) {
    return;
};

/* Emmiter */
class EventEmitter {
    constructor() {
        this.events = {};
    }
    on(t, e) {
        if (typeof t === 'string') {
            t = [t];
        }
        t.forEach(t => {
            if (!this.events[t]) {
                this.events[t] = [];
            }
            this.events[t].push(e);
        });
    }
    off(t, e) {
        if (typeof t === 'string') {
            t = [t];
        }
        t.forEach(t => {
            if (this.events[t]) {
                this.events[t] = this.events[t].filter(t => t !== e);
            }
        });
    }
    emit(t, ...e) {
        if (this.events[t]) {
            this.events[t].forEach(t => {
                t(...e);
            });
        }
    }
    once(t, e) {
        if (typeof t === 'string') {
            t = [t];
        }
        let s = (...i) => {
            e(...i);
            this.off(t, s);
        };
        this.on(t, s);
    }
}

const plppdo = new EventEmitter();

new MutationObserver((mutationsList) => {
    for (let mutation of mutationsList) {
        if (mutation.type === 'childList') plppdo.emit('domChanged');
    }
}).observe(document.body, { childList: true, subtree: true });

/* Misc Functions */
window.debug = function(text) { /* QuickFix */ }
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
const findAndClickByClass = className => { 
    const element = document.querySelector(.${className}); 
    if (element) { 
        element.click(); 
    } 
}

function sendToast(text, duration = 5000, gravity = 'bottom') {
    Toastify({
        text: text,
        duration: duration,
        gravity: gravity,
        position: "center",
        stopOnFocus: true,
        style: { background: "#000000" }
    }).showToast();
    debug(text);
};

async function showSplashScreen() {
    splashScreen.style.cssText = "position:fixed;top:0;left:0;width:100%;height:100%;background-color:#000;display:flex;align-items:center;justify-content:center;z-index:9999;opacity:0;transition:opacity 0.5s ease;user-select:none;color:white;font-size:30px;text-align:center;";
    splashScreen.innerHTML = '<span style="color:white;">SHADOW</span><span style="color:#32CD32;">DESTROYER</span>'; // DESTROYER na cor verde
    document.body.appendChild(splashScreen);
    setTimeout(() => splashScreen.style.opacity = '1', 10);
};

async function hideSplashScreen() {
    splashScreen.style.opacity = '0';
    setTimeout(() => splashScreen.remove(), 1000);
};

// Pop-up creation and functionality
function showPopup() {
    popup.style.cssText = "position:fixed;top:50%;left:50%;transform:translate(-50%, -50%);background-color:#fff;padding:20px;border-radius:10px;box-shadow:0px 0px 10px rgba(0, 0, 0, 0.5);z-index:10000;text-align:center;max-width:300px;";
    
    const image = document.createElement('img');
    image.src = 'https://i.imgur.com/t4mfuJU.png';
    image.style.width = '100px';
    image.style.height = '100px';
    
    const text = document.createElement('p');
    text.innerText = 'Shadow Destroyer';
    text.style.fontSize = '18px';
    text.style.marginTop = '10px';
    
    const discordButton = document.createElement('button');
    discordButton.innerText = 'Entrar no Server';
    discordButton.style.marginTop = '20px';
    discordButton.style.padding = '10px';
    discordButton.style.backgroundColor = '#7289da';
    discordButton.style.border = 'none';
    discordButton.style.borderRadius = '5px';
    discordButton.style.color = 'white';
    discordButton.onclick = () => {
        window.open('https://discord.gg/gamesdest', '_blank');
    };

    const closeButton = document.createElement('span');
    closeButton.innerText = 'X';
    closeButton.style.position = 'absolute';
    closeButton.style.top = '10px';
    closeButton.style.right = '10px';
    closeButton.style.cursor = 'pointer';
    closeButton.onclick = () => {
        popup.remove();
    };

    popup.appendChild(closeButton);
    popup.appendChild(image);
    popup.appendChild(text);
    popup.appendChild(discordButton);
    document.body.appendChild(popup);
}

async function loadScript(url, label) {
    return fetch(url)
        .then(response => response.text())
        .then(script => {
            loadedPlugins.push(label);
            eval(script);
        });
}

async function loadCss(url) {
    return new Promise((resolve) => {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = url;
        link.onload = () => resolve();
        document.head.appendChild(link);
    });
}

/* Main Functions */
function setupMain() {
    loadScript('https://raw.githubusercontent.com/DarkMod3/KhanFucker/refs/heads/Main/Plugins/questionSpoof.js', 'questionSpoof');
    loadScript('https://raw.githubusercontent.com/DarkMod3/KhanFucker/refs/heads/Main/Plugins/videoSpoof.js', 'videoSpoof');
    loadScript('https://raw.githubusercontent.com/DarkMod3/KhanFucker/refs/heads/Main/Plugins/spoofUser.js', 'spoofUser');
    loadScript('https://raw.githubusercontent.com/DarkMod3/KhanFucker/refs/heads/Main/Plugins/autoAnswer.js', 'autoAnswer');
}

/* Inject */
if (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) { window.location.href = "https://pt.khanacademy.org/"; }

showSplashScreen();

loadScript('https://cdn.jsdelivr.net/npm/darkreader', 'darkReaderPlugin').then(() => { 
    DarkReader.setFetchMethod(window.fetch); 
    DarkReader.enable(); 
});

loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css', 'toastifyCss');
loadScript('https://cdn.jsdelivr.net/npm/toastify-js', 'toastifyPlugin')
    .then(async () => {
        await fetch(https://${location.hostname}/api/internal/graphql/getFullUserProfile, { 
            "body": "{\"operationName\":\"getFullUserProfile\",\"query\":\"query getFullUserProfile($kaid: String, $username: String) {\\n  user(kaid: $kaid, username: $username) {\\n    id\\n    kaid\\n    key\\n    userId\\n    email\\n    username\\n    profileRoot\\n    gaUserId\\n    isPhantom\\n    isDeveloper: hasPermission(name: \\\"can_do_what_only_admins_can_do\\\")\\n    isPublisher: hasPermission(name: \\\"can_publish\\\", scope: ANY_ON_CURRENT_LOCALE)\\n    isModerator: hasPermission(name: \\\"can_moderate_users\\\", scope: GLOBAL)\\n    isParent\\n    isTeacher\\n    isFormalTeacher\\n    isK4dStudent\\n    isKmapStudent\\n    isDataCollectible\\n    isChild\\n    isOrphan\\n    isCoachingLoggedInUser\\n    canModifyCoaches\\n    nickname\\n    hideVisual\\n    joined\\n    points\\n    countVideosCompleted\\n    bio\\n    profile {\\n      accessLevel\\n      __typename\\n    }\\n    soundOn\\n    muteVideos\\n    showCaptions\\n    prefersReducedMotion\\n    noColorInVideos\\n    newNotificationCount\\n    canHellban: hasPermission(name: \\\"can_ban_users\\\", scope: GLOBAL)\\n    canMessageUsers: hasPermission(\\n      name: \\\"can_send_moderator_messages\\\"\\n      scope: GLOBAL\\n    )\\n    isSelf: isActor\\n    hasStudents: hasCoachees\\n    hasClasses\\n    hasChildren\\n    hasCoach\\n    badgeCounts\\n    homepageUrl\\n    isMidsignupPhantom\\n    includesDistrictOwnedData\\n    includesKmapDistrictOwnedData\\n    includesK4dDistrictOwnedData\\n    canAccessDistrictsHomepage\\n    preferredKaLocale {\\n      id\\n      kaLocale\\n      status\\n      __typename\\n    }\\n    underAgeGate {\\n      parentEmail\\n      daysUntilCutoff\\n      approvalGivenAt\\n      __typename\\n    }\\n    authEmails\\n    signupDataIfUnverified {\\n      email\\n      emailBounced\\n      __typename\\n    }\\n    pendingEmailVerifications {\\n      email\\n      __typename\\n    }\\n    hasAccessToAIGuideCompanionMode\\n    hasAccessToAIGuideLearner\\n    hasAccessToAIGuideDistrictAdmin\\n    hasAccessToAIGuideParent\\n    hasAccessToAIGuideTeacher\\n    tosAccepted\\n    shouldShowAgeCheck\\n    birthMonthYear\\n    lastLoginCountry\\n    region\\n    userDistrictInfos {\\n      id\\n      isKAD\\n      district {\\n        id\\n        region\\n        __typename\\n      }\\n      __typename\\n    }\\n    schoolAffiliation {\\n      id\\n      location\\n      __typename\\n    }\\n    __typename\\n  }\\n  actorIsImpersonatingUser\\n  isAIGuideEnabled\\n  hasAccessToAIGuideDev\\n}\"}", 
            "method": "POST", 
            "mode": "cors", 
            "credentials": "include" 
        })
        .then(async response => { 
            let data = await response.json(); 
            user = { nickname: data.data.user.nickname, username: data.data.user.username, UID: data.data.user.id.slice(-5) }; 
        });
        
        await delay(2000);

        sendToast("ðŸŽ®â”ƒShadow Destroyer iniciado!"); // Emoji de controle

        hideSplashScreen();
        setupMain();
        showPopup(); // Show the pop-up

        console.clear();
        console.log(" \n  ______          _    \n |  ____|        | |   \n | |__ _   _  ___| | __\n |  __| | | |/ __| |/ /\n | |  | |_| | (__|   < \n |_|   \\__,_|\\___|_|\\_\\\n ");
    });

tira o trem de entra no discord pra usa
